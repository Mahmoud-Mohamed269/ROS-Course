// Generated by gencpp from file robotis/counterResponse.msg
// DO NOT EDIT!


#ifndef ROBOTIS_MESSAGE_COUNTERRESPONSE_H
#define ROBOTIS_MESSAGE_COUNTERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotis
{
template <class ContainerAllocator>
struct counterResponse_
{
  typedef counterResponse_<ContainerAllocator> Type;

  counterResponse_()
    : y(0)  {
    }
  counterResponse_(const ContainerAllocator& _alloc)
    : y(0)  {
  (void)_alloc;
    }



   typedef int32_t _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::robotis::counterResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotis::counterResponse_<ContainerAllocator> const> ConstPtr;

}; // struct counterResponse_

typedef ::robotis::counterResponse_<std::allocator<void> > counterResponse;

typedef boost::shared_ptr< ::robotis::counterResponse > counterResponsePtr;
typedef boost::shared_ptr< ::robotis::counterResponse const> counterResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotis::counterResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotis::counterResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotis::counterResponse_<ContainerAllocator1> & lhs, const ::robotis::counterResponse_<ContainerAllocator2> & rhs)
{
  return lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotis::counterResponse_<ContainerAllocator1> & lhs, const ::robotis::counterResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotis

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotis::counterResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotis::counterResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotis::counterResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotis::counterResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotis::counterResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotis::counterResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotis::counterResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48a1903b27e436ce72db71499e9e0169";
  }

  static const char* value(const ::robotis::counterResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48a1903b27e436ceULL;
  static const uint64_t static_value2 = 0x72db71499e9e0169ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotis::counterResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotis/counterResponse";
  }

  static const char* value(const ::robotis::counterResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotis::counterResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int32 y\n"
"\n"
;
  }

  static const char* value(const ::robotis::counterResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotis::counterResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct counterResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotis::counterResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotis::counterResponse_<ContainerAllocator>& v)
  {
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTIS_MESSAGE_COUNTERRESPONSE_H
